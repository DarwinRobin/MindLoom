generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String              @id @default(uuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]           @relation("UserAccounts")
  sessions      Session[]           @relation("UserSessions")
  enrollments   CourseEnrollment[]
  progress      Progress[]          @relation("UserProgress")
}

model Account {
  id                String   @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation("UserAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation("UserSessions", fields: [userId], references: [id], onDelete: Cascade)
}

model Course {
  id          String             @id @default(uuid())
  title       String
  description String
  image       String?
  lessons     Lesson[]
  enrollments CourseEnrollment[]
}

model Lesson {
  id        String     @id @default(uuid())
  title     String
  content   String
  courseId  String
  course    Course     @relation(fields: [courseId], references: [id])
  progress  Progress[]
}

model CourseEnrollment {
  id        String   @id @default(uuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  progress  Progress[]
}

model Progress {
  id            String   @id @default(uuid())
  enrollmentId  String
  lessonId      String
  userId        String

  enrollment    CourseEnrollment @relation(fields: [enrollmentId], references: [id])
  lesson        Lesson           @relation(fields: [lessonId], references: [id])
  user          User             @relation("UserProgress", fields: [userId], references: [id])
}
